/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { SCW, SCWInterface } from "../../../contracts/SCW.sol/SCW";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_ownerAddress",
        type: "address",
      },
      {
        internalType: "string",
        name: "_ownerEmail",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ownerAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ownerEmail",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50604051610657380380610657833981810160405281019061003291906101b0565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060019080519060200190610088929190610090565b505050610371565b82805461009c906102ca565b90600052602060002090601f0160209004810192826100be5760008555610105565b82601f106100d757805160ff1916838001178555610105565b82800160010185558215610105579182015b828111156101045782518255916020019190600101906100e9565b5b5090506101129190610116565b5090565b5b8082111561012f576000816000905550600101610117565b5090565b600061014661014184610235565b610204565b90508281526020810184848401111561015e57600080fd5b610169848285610297565b509392505050565b6000815190506101808161035a565b92915050565b600082601f83011261019757600080fd5b81516101a7848260208601610133565b91505092915050565b600080604083850312156101c357600080fd5b60006101d185828601610171565b925050602083015167ffffffffffffffff8111156101ee57600080fd5b6101fa85828601610186565b9150509250929050565b6000604051905081810181811067ffffffffffffffff8211171561022b5761022a61032b565b5b8060405250919050565b600067ffffffffffffffff8211156102505761024f61032b565b5b601f19601f8301169050602081019050919050565b600061027082610277565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b838110156102b557808201518184015260208101905061029a565b838111156102c4576000848401525b50505050565b600060028204905060018216806102e257607f821691505b602082108114156102f6576102f56102fc565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61036381610265565b811461036e57600080fd5b50565b6102d7806103806000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806328ef87051461003b5780638f84aa0914610059575b600080fd5b610043610077565b604051610050919061018c565b60405180910390f35b610061610105565b60405161006e9190610171565b60405180910390f35b600180546100849061022f565b80601f01602080910402602001604051908101604052809291908181526020018280546100b09061022f565b80156100fd5780601f106100d2576101008083540402835291602001916100fd565b820191906000526020600020905b8154815290600101906020018083116100e057829003601f168201915b505050505081565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610132816101ca565b82525050565b6000610143826101ae565b61014d81856101b9565b935061015d8185602086016101fc565b61016681610290565b840191505092915050565b60006020820190506101866000830184610129565b92915050565b600060208201905081810360008301526101a68184610138565b905092915050565b600081519050919050565b600082825260208201905092915050565b60006101d5826101dc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b8381101561021a5780820151818401526020810190506101ff565b83811115610229576000848401525b50505050565b6000600282049050600182168061024757607f821691505b6020821081141561025b5761025a610261565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f830116905091905056fea264697066735822122035295e85977f49e44a860fbdb7a4b9ab3eee6d11b8693b45f6e9c5f4836cde1e64736f6c63430008000033";

type SCWConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SCWConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SCW__factory extends ContractFactory {
  constructor(...args: SCWConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _ownerAddress: PromiseOrValue<string>,
    _ownerEmail: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SCW> {
    return super.deploy(
      _ownerAddress,
      _ownerEmail,
      overrides || {}
    ) as Promise<SCW>;
  }
  override getDeployTransaction(
    _ownerAddress: PromiseOrValue<string>,
    _ownerEmail: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _ownerAddress,
      _ownerEmail,
      overrides || {}
    );
  }
  override attach(address: string): SCW {
    return super.attach(address) as SCW;
  }
  override connect(signer: Signer): SCW__factory {
    return super.connect(signer) as SCW__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SCWInterface {
    return new utils.Interface(_abi) as SCWInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SCW {
    return new Contract(address, _abi, signerOrProvider) as SCW;
  }
}
