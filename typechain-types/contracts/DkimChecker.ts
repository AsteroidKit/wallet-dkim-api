/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface DkimCheckerInterface extends utils.Interface {
  functions: {
    "arrayToLE(uint256[8])": FunctionFragment;
    "checkBodySHA1(bytes,bytes20)": FunctionFragment;
    "checkBodySHA256(bytes,bytes32)": FunctionFragment;
    "dkimKeysEd(bytes32,bytes32)": FunctionFragment;
    "dkimKeysRsa(bytes32,bytes32)": FunctionFragment;
    "ecAddVec(uint256[2],uint256[2])": FunctionFragment;
    "getDkimKeyEd(string,string)": FunctionFragment;
    "getDkimKeyRsa(string,string)": FunctionFragment;
    "initW(uint256,uint256,uint256,uint256[80])": FunctionFragment;
    "oracle()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rotr(uint256,uint256)": FunctionFragment;
    "scalarMult(uint256[2],uint256)": FunctionFragment;
    "setDkimKeyEd(string,string,uint256,uint256,uint256)": FunctionFragment;
    "setDkimKeyRsa(string,string,bytes,bytes)": FunctionFragment;
    "sha512modl(uint256,uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "update(uint256[80])": FunctionFragment;
    "verifyED25519(string,string,uint256,uint256[2],uint256[2],bytes)": FunctionFragment;
    "verifyRSASHA1(string,string,bytes,bytes)": FunctionFragment;
    "verifyRSASHA256(string,string,bytes,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "arrayToLE"
      | "checkBodySHA1"
      | "checkBodySHA256"
      | "dkimKeysEd"
      | "dkimKeysRsa"
      | "ecAddVec"
      | "getDkimKeyEd"
      | "getDkimKeyRsa"
      | "initW"
      | "oracle"
      | "owner"
      | "renounceOwnership"
      | "rotr"
      | "scalarMult"
      | "setDkimKeyEd"
      | "setDkimKeyRsa"
      | "sha512modl"
      | "transferOwnership"
      | "update"
      | "verifyED25519"
      | "verifyRSASHA1"
      | "verifyRSASHA256"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "arrayToLE",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "checkBodySHA1",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkBodySHA256",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "dkimKeysEd",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "dkimKeysRsa",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "ecAddVec",
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getDkimKeyEd",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDkimKeyRsa",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initW",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "oracle", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rotr",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "scalarMult",
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDkimKeyEd",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setDkimKeyRsa",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sha512modl",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyED25519",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRSASHA1",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRSASHA256",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "arrayToLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkBodySHA1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkBodySHA256",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dkimKeysEd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dkimKeysRsa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ecAddVec", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDkimKeyEd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDkimKeyRsa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initW", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "oracle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rotr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scalarMult", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDkimKeyEd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDkimKeyRsa",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sha512modl", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyED25519",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyRSASHA1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyRSASHA256",
    data: BytesLike
  ): Result;

  events: {
    "Debug(bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ReturnVal(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Debug"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReturnVal"): EventFragment;
}

export interface DebugEventObject {
  x: string;
}
export type DebugEvent = TypedEvent<[string], DebugEventObject>;

export type DebugEventFilter = TypedEventFilter<DebugEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ReturnValEventObject {
  arg0: boolean;
}
export type ReturnValEvent = TypedEvent<[boolean], ReturnValEventObject>;

export type ReturnValEventFilter = TypedEventFilter<ReturnValEvent>;

export interface DkimChecker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DkimCheckerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    arrayToLE(
      Ai: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { high: BigNumber; low: BigNumber }>;

    checkBodySHA1(
      body: PromiseOrValue<BytesLike>,
      bodyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkBodySHA256(
      body: PromiseOrValue<BytesLike>,
      bodyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dkimKeysEd(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x: BigNumber;
        y: BigNumber;
        p: BigNumber;
      }
    >;

    dkimKeysRsa(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { exponent: string; modulus: string }>;

    ecAddVec(
      _a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _b: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]]>;

    getDkimKeyEd(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

    getDkimKeyRsa(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    initW(
      _r: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _hx: PromiseOrValue<BigNumberish>,
      w: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[void]>;

    oracle(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rotr(
      value: PromiseOrValue<BigNumberish>,
      d: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    scalarMult(
      point: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      s: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    setDkimKeyEd(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      p: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDkimKeyRsa(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      _exponent: PromiseOrValue<BytesLike>,
      _modulus: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    sha512modl(
      _r: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _hx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { hashmodl: BigNumber }>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    update(
      W: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    verifyED25519(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      _r: PromiseOrValue<BigNumberish>,
      _R: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _lhs: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _canonicalizedHeader: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyRSASHA1(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      _sig: PromiseOrValue<BytesLike>,
      _canonicalizedHeader: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyRSASHA256(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      _sig: PromiseOrValue<BytesLike>,
      _canonicalizedHeader: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  arrayToLE(
    Ai: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { high: BigNumber; low: BigNumber }>;

  checkBodySHA1(
    body: PromiseOrValue<BytesLike>,
    bodyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkBodySHA256(
    body: PromiseOrValue<BytesLike>,
    bodyHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dkimKeysEd(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      x: BigNumber;
      y: BigNumber;
      p: BigNumber;
    }
  >;

  dkimKeysRsa(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[string, string] & { exponent: string; modulus: string }>;

  ecAddVec(
    _a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _b: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  getDkimKeyEd(
    _selector: PromiseOrValue<string>,
    _domain: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

  getDkimKeyRsa(
    _selector: PromiseOrValue<string>,
    _domain: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  initW(
    _r: PromiseOrValue<BigNumberish>,
    _p: PromiseOrValue<BigNumberish>,
    _hx: PromiseOrValue<BigNumberish>,
    w: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<void>;

  oracle(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rotr(
    value: PromiseOrValue<BigNumberish>,
    d: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  scalarMult(
    point: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    s: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  setDkimKeyEd(
    _selector: PromiseOrValue<string>,
    _domain: PromiseOrValue<string>,
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    p: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDkimKeyRsa(
    _selector: PromiseOrValue<string>,
    _domain: PromiseOrValue<string>,
    _exponent: PromiseOrValue<BytesLike>,
    _modulus: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  sha512modl(
    _r: PromiseOrValue<BigNumberish>,
    _p: PromiseOrValue<BigNumberish>,
    _hx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  update(
    W: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  verifyED25519(
    _selector: PromiseOrValue<string>,
    _domain: PromiseOrValue<string>,
    _r: PromiseOrValue<BigNumberish>,
    _R: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _lhs: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _canonicalizedHeader: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyRSASHA1(
    _selector: PromiseOrValue<string>,
    _domain: PromiseOrValue<string>,
    _sig: PromiseOrValue<BytesLike>,
    _canonicalizedHeader: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyRSASHA256(
    _selector: PromiseOrValue<string>,
    _domain: PromiseOrValue<string>,
    _sig: PromiseOrValue<BytesLike>,
    _canonicalizedHeader: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    arrayToLE(
      Ai: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { high: BigNumber; low: BigNumber }>;

    checkBodySHA1(
      body: PromiseOrValue<BytesLike>,
      bodyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkBodySHA256(
      body: PromiseOrValue<BytesLike>,
      bodyHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    dkimKeysEd(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        x: BigNumber;
        y: BigNumber;
        p: BigNumber;
      }
    >;

    dkimKeysRsa(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string, string] & { exponent: string; modulus: string }>;

    ecAddVec(
      _a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _b: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    getDkimKeyEd(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { x: BigNumber; y: BigNumber }>;

    getDkimKeyRsa(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    initW(
      _r: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _hx: PromiseOrValue<BigNumberish>,
      w: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    oracle(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rotr(
      value: PromiseOrValue<BigNumberish>,
      d: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scalarMult(
      point: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      s: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    setDkimKeyEd(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      p: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setDkimKeyRsa(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      _exponent: PromiseOrValue<BytesLike>,
      _modulus: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sha512modl(
      _r: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _hx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      W: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    verifyED25519(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      _r: PromiseOrValue<BigNumberish>,
      _R: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _lhs: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _canonicalizedHeader: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyRSASHA1(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      _sig: PromiseOrValue<BytesLike>,
      _canonicalizedHeader: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyRSASHA256(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      _sig: PromiseOrValue<BytesLike>,
      _canonicalizedHeader: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Debug(bytes32)"(x?: null): DebugEventFilter;
    Debug(x?: null): DebugEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ReturnVal(bool)"(arg0?: null): ReturnValEventFilter;
    ReturnVal(arg0?: null): ReturnValEventFilter;
  };

  estimateGas: {
    arrayToLE(
      Ai: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkBodySHA1(
      body: PromiseOrValue<BytesLike>,
      bodyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkBodySHA256(
      body: PromiseOrValue<BytesLike>,
      bodyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dkimKeysEd(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dkimKeysRsa(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ecAddVec(
      _a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _b: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDkimKeyEd(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDkimKeyRsa(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initW(
      _r: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _hx: PromiseOrValue<BigNumberish>,
      w: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    oracle(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rotr(
      value: PromiseOrValue<BigNumberish>,
      d: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scalarMult(
      point: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      s: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDkimKeyEd(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      p: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDkimKeyRsa(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      _exponent: PromiseOrValue<BytesLike>,
      _modulus: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    sha512modl(
      _r: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _hx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    update(
      W: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyED25519(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      _r: PromiseOrValue<BigNumberish>,
      _R: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _lhs: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _canonicalizedHeader: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyRSASHA1(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      _sig: PromiseOrValue<BytesLike>,
      _canonicalizedHeader: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyRSASHA256(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      _sig: PromiseOrValue<BytesLike>,
      _canonicalizedHeader: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    arrayToLE(
      Ai: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkBodySHA1(
      body: PromiseOrValue<BytesLike>,
      bodyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkBodySHA256(
      body: PromiseOrValue<BytesLike>,
      bodyHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dkimKeysEd(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dkimKeysRsa(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ecAddVec(
      _a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _b: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDkimKeyEd(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDkimKeyRsa(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initW(
      _r: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _hx: PromiseOrValue<BigNumberish>,
      w: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rotr(
      value: PromiseOrValue<BigNumberish>,
      d: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scalarMult(
      point: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      s: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDkimKeyEd(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      p: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDkimKeyRsa(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      _exponent: PromiseOrValue<BytesLike>,
      _modulus: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    sha512modl(
      _r: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _hx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    update(
      W: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyED25519(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      _r: PromiseOrValue<BigNumberish>,
      _R: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _lhs: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _canonicalizedHeader: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyRSASHA1(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      _sig: PromiseOrValue<BytesLike>,
      _canonicalizedHeader: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyRSASHA256(
      _selector: PromiseOrValue<string>,
      _domain: PromiseOrValue<string>,
      _sig: PromiseOrValue<BytesLike>,
      _canonicalizedHeader: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
