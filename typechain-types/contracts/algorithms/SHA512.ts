/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface SHA512Interface extends utils.Interface {
  functions: {
    "arrayToLE(uint256[8])": FunctionFragment;
    "ecAddVec(uint256[2],uint256[2])": FunctionFragment;
    "initW(uint256,uint256,uint256,uint256[80])": FunctionFragment;
    "rotr(uint256,uint256)": FunctionFragment;
    "scalarMult(uint256[2],uint256)": FunctionFragment;
    "sha512modl(uint256,uint256,uint256)": FunctionFragment;
    "update(uint256[80])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "arrayToLE"
      | "ecAddVec"
      | "initW"
      | "rotr"
      | "scalarMult"
      | "sha512modl"
      | "update"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "arrayToLE",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "ecAddVec",
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initW",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "rotr",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "scalarMult",
    values: [
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "sha512modl",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(functionFragment: "arrayToLE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ecAddVec", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initW", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rotr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scalarMult", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sha512modl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {};
}

export interface SHA512 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SHA512Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    arrayToLE(
      Ai: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { high: BigNumber; low: BigNumber }>;

    ecAddVec(
      _a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _b: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<[[BigNumber, BigNumber]]>;

    initW(
      _r: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _hx: PromiseOrValue<BigNumberish>,
      w: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[void]>;

    rotr(
      value: PromiseOrValue<BigNumberish>,
      d: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    scalarMult(
      point: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      s: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    sha512modl(
      _r: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _hx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { hashmodl: BigNumber }>;

    update(
      W: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;
  };

  arrayToLE(
    Ai: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { high: BigNumber; low: BigNumber }>;

  ecAddVec(
    _a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    _b: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  initW(
    _r: PromiseOrValue<BigNumberish>,
    _p: PromiseOrValue<BigNumberish>,
    _hx: PromiseOrValue<BigNumberish>,
    w: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<void>;

  rotr(
    value: PromiseOrValue<BigNumberish>,
    d: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  scalarMult(
    point: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    s: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber]>;

  sha512modl(
    _r: PromiseOrValue<BigNumberish>,
    _p: PromiseOrValue<BigNumberish>,
    _hx: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  update(
    W: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    arrayToLE(
      Ai: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { high: BigNumber; low: BigNumber }>;

    ecAddVec(
      _a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _b: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    initW(
      _r: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _hx: PromiseOrValue<BigNumberish>,
      w: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    rotr(
      value: PromiseOrValue<BigNumberish>,
      d: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scalarMult(
      point: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      s: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    sha512modl(
      _r: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _hx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    update(
      W: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {};

  estimateGas: {
    arrayToLE(
      Ai: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ecAddVec(
      _a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _b: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initW(
      _r: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _hx: PromiseOrValue<BigNumberish>,
      w: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rotr(
      value: PromiseOrValue<BigNumberish>,
      d: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    scalarMult(
      point: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      s: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sha512modl(
      _r: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _hx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    update(
      W: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    arrayToLE(
      Ai: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ecAddVec(
      _a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      _b: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initW(
      _r: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _hx: PromiseOrValue<BigNumberish>,
      w: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rotr(
      value: PromiseOrValue<BigNumberish>,
      d: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    scalarMult(
      point: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      s: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sha512modl(
      _r: PromiseOrValue<BigNumberish>,
      _p: PromiseOrValue<BigNumberish>,
      _hx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    update(
      W: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
